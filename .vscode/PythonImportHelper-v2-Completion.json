[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "vendors",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "src.police_agent",
        "description": "src.police_agent",
        "isExtraImport": true,
        "detail": "src.police_agent",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain.chat_models",
        "description": "langchain.chat_models",
        "isExtraImport": true,
        "detail": "langchain.chat_models",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "initialize_agent",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "price_comparison",
        "importPath": "src.tools.tools",
        "description": "src.tools.tools",
        "isExtraImport": true,
        "detail": "src.tools.tools",
        "documentation": {}
    },
    {
        "label": "handle_error_case",
        "importPath": "src.utils.utils",
        "description": "src.utils.utils",
        "isExtraImport": true,
        "detail": "src.utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_comparison_fields",
        "importPath": "src.utils.utils",
        "description": "src.utils.utils",
        "isExtraImport": true,
        "detail": "src.utils.utils",
        "documentation": {}
    },
    {
        "label": "calculate_price_difference_percentage",
        "importPath": "src.utils.utils",
        "description": "src.utils.utils",
        "isExtraImport": true,
        "detail": "src.utils.utils",
        "documentation": {}
    },
    {
        "label": "check_cart_for_malicious_items",
        "kind": 2,
        "importPath": "src.pages.checkout",
        "description": "src.pages.checkout",
        "peekOfCode": "def check_cart_for_malicious_items(cart, vendors):\n    \"\"\"Check each product in the cart using the AI agent and return any warnings.\"\"\"\n    warnings = []\n    for id, quantity in cart.items():\n        product_name = next((p[\"name\"] for v in vendors\n                             for p in v[\"products\"] if p[\"id\"] == id), \"Unknown\")\n        agent_response = agent.run(f\"Check for scams for {product_name} and think step by step before taking action.\"\n                                   f\"If a scam is detected, give a final answer in this format: Scam: 'your answer'\")\n        print(agent_response)\n        if any(phrase in agent_response for phrase in [\"Scam\"]):",
        "detail": "src.pages.checkout",
        "documentation": {}
    },
    {
        "label": "proceed_btn",
        "kind": 5,
        "importPath": "src.pages.checkout",
        "description": "src.pages.checkout",
        "peekOfCode": "proceed_btn = st.button('Proceed to checkout')\nif back_btn:\n    st.switch_page(\"app.py\")\nif proceed_btn:\n    #do something\n    st.switch_page(\"pages/conclusion.py\")\n# Checkout Page Logic",
        "detail": "src.pages.checkout",
        "documentation": {}
    },
    {
        "label": "price_comparison",
        "kind": 2,
        "importPath": "src.tools.tools",
        "description": "src.tools.tools",
        "peekOfCode": "def price_comparison(product_data, market_data, product_name_or_id):\n    market_lookup = {product['id']: product \n                     for product in market_data['products']}\n    for data in product_data:\n          if (data['id'] == product_name_or_id or \n              data['name'] == product_name_or_id):\n              market_product = market_lookup.get(data['id'])\n              if market_product:\n                  vendor_price = data['original_price']\n                  market_price = market_product['average_market_price']",
        "detail": "src.tools.tools",
        "documentation": {}
    },
    {
        "label": "handle_error_case",
        "kind": 2,
        "importPath": "src.utils.utils",
        "description": "src.utils.utils",
        "peekOfCode": "def handle_error_case(comparison_result):\n    \"\"\"Handle the error case if 'error' is in the comparison result.\"\"\"\n    if \"error\" in comparison_result:\n        return {\"error\": comparison_result[\"error\"]}\n    return None\ndef extract_comparison_fields(comparison_result):\n    \"\"\"Extract and validate required fields from the comparison result.\"\"\"\n    try:\n        product_name = comparison_result[\"product_name\"]\n        vendor_price = float(comparison_result[\"vendor_price\"])",
        "detail": "src.utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_comparison_fields",
        "kind": 2,
        "importPath": "src.utils.utils",
        "description": "src.utils.utils",
        "peekOfCode": "def extract_comparison_fields(comparison_result):\n    \"\"\"Extract and validate required fields from the comparison result.\"\"\"\n    try:\n        product_name = comparison_result[\"product_name\"]\n        vendor_price = float(comparison_result[\"vendor_price\"])\n        market_price = float(comparison_result[\"market_price\"])\n        comparison = comparison_result[\"comparison\"]\n        return product_name, vendor_price, market_price, comparison\n    except KeyError as e:\n        raise ValueError(f\"Missing field in comparison result: {str(e)}\")",
        "detail": "src.utils.utils",
        "documentation": {}
    },
    {
        "label": "calculate_price_difference_percentage",
        "kind": 2,
        "importPath": "src.utils.utils",
        "description": "src.utils.utils",
        "peekOfCode": "def calculate_price_difference_percentage(vendor_price, market_price):\n    \"\"\"Calculate the price difference percentage between vendor and market prices.\"\"\"\n    if market_price == 0:\n        raise ValueError(\"Market price cannot be zero.\")\n    return ((market_price - vendor_price) / market_price) * 100",
        "detail": "src.utils.utils",
        "documentation": {}
    },
    {
        "label": "load_data",
        "kind": 2,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "def load_data():\n    # Load vendor data\n    with open(os.path.join('src', 'db', 'vendor_data.json')) as f:\n        vendor_data = json.load(f)\n    # Load product data\n    with open(os.path.join('src', 'db', 'product_data.json')) as f:\n        product_data = json.load(f)\n    # Combine vendor data with products\n    vendors = []\n    for vendor in vendor_data['vendors']:",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "add_to_cart",
        "kind": 2,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "def add_to_cart(product):\n    \"\"\"Add the selected product to the cart.\"\"\"\n    id = product[\"id\"]\n    if id in st.session_state.cart:\n        st.session_state.cart[id] += 1  # Increment quantity\n    else:\n        st.session_state.cart[id] = 1  # Add new product\n    st.session_state.total += product[\"original_price\"]  # Update total\n    st.success(f\"Added {product['name']} to cart!\")\n# Header",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "vendors",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "vendors = load_data()\n# Initialize session state for cart and total\nif 'cart' not in st.session_state:\n    st.session_state.cart = {}\nif 'total' not in st.session_state:\n    st.session_state.total = 0\ndef add_to_cart(product):\n    \"\"\"Add the selected product to the cart.\"\"\"\n    id = product[\"id\"]\n    if id in st.session_state.cart:",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "generate_message",
        "kind": 2,
        "importPath": "src.police_agent",
        "description": "src.police_agent",
        "peekOfCode": "def generate_message(product_name, \n                     vendor_price, \n                     market_price, \n                     comparison, \n                     price_difference_percentage, \n                     threshold=30):\n    \"\"\"\n    Generate an appropriate message based on the comparison result.\n    Returns a tuple of (is_malicious, message).\n    \"\"\"",
        "detail": "src.police_agent",
        "documentation": {}
    },
    {
        "label": "format_agent_response",
        "kind": 2,
        "importPath": "src.police_agent",
        "description": "src.police_agent",
        "peekOfCode": "def format_agent_response(comparison_result, significant_discount_threshold=30):\n    \"\"\"Main function to format the agent's response.\"\"\"\n    error_response = handle_error_case(comparison_result)\n    if error_response:\n        return error_response\n    product_name, vendor_price, market_price, comparison = extract_comparison_fields(comparison_result)\n    price_difference_percentage = calculate_price_difference_percentage(vendor_price, market_price)\n    significant_difference, message = generate_message(\n        product_name, vendor_price, market_price, comparison, \n        price_difference_percentage, significant_discount_threshold",
        "detail": "src.police_agent",
        "documentation": {}
    },
    {
        "label": "openai_api_key",
        "kind": 5,
        "importPath": "src.police_agent",
        "description": "src.police_agent",
        "peekOfCode": "openai_api_key = os.getenv(\"OPENAI_API_KEY\")\nif not openai_api_key:\n    raise ValueError(\"OPENAI_API_KEY is not set in the environment variables.\")\nwith open('src/db/price_history.json', 'r') as file:\n    market_data = json.load(file)\nwith open('src/db/product_data.json', 'r') as file:\n    product_data = json.load(file)\ndef generate_message(product_name, \n                     vendor_price, \n                     market_price, ",
        "detail": "src.police_agent",
        "documentation": {}
    },
    {
        "label": "price_comparison_tool",
        "kind": 5,
        "importPath": "src.police_agent",
        "description": "src.police_agent",
        "peekOfCode": "price_comparison_tool = Tool(\n    name=\"Price Comparison Tool\",\n    func=lambda product_name_or_id: format_agent_response(\n      price_comparison(product_data, market_data, product_name_or_id)),\n    description=\"Compares the vendor price with the average market price and provides a report.\"\n)\ntools = [price_comparison_tool, ]\nmodel = ChatOpenAI(model='gpt-4', openai_api_key=openai_api_key)\nagent = initialize_agent(llm=model,\n                         tools=tools, ",
        "detail": "src.police_agent",
        "documentation": {}
    },
    {
        "label": "tools",
        "kind": 5,
        "importPath": "src.police_agent",
        "description": "src.police_agent",
        "peekOfCode": "tools = [price_comparison_tool, ]\nmodel = ChatOpenAI(model='gpt-4', openai_api_key=openai_api_key)\nagent = initialize_agent(llm=model,\n                         tools=tools, \n                         agent_type=\"zero-shot-react-description\", \n                         verbose=True)",
        "detail": "src.police_agent",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "src.police_agent",
        "description": "src.police_agent",
        "peekOfCode": "model = ChatOpenAI(model='gpt-4', openai_api_key=openai_api_key)\nagent = initialize_agent(llm=model,\n                         tools=tools, \n                         agent_type=\"zero-shot-react-description\", \n                         verbose=True)",
        "detail": "src.police_agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "src.police_agent",
        "description": "src.police_agent",
        "peekOfCode": "agent = initialize_agent(llm=model,\n                         tools=tools, \n                         agent_type=\"zero-shot-react-description\", \n                         verbose=True)",
        "detail": "src.police_agent",
        "documentation": {}
    },
    {
        "label": "vendors",
        "kind": 5,
        "importPath": "src.products_data",
        "description": "src.products_data",
        "peekOfCode": "vendors = [\n    {\n        \"name\": \"Vendor 1\",\n        \"products\": [\n            {\n                \"id\": 1,\n                \"name\": \"Product 1\",\n                \"price\": 10.00,\n                \"image\": \"https://via.placeholder.com/150\"\n            },",
        "detail": "src.products_data",
        "documentation": {}
    }
]