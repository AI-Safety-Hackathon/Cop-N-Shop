[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain.chat_models",
        "description": "langchain.chat_models",
        "isExtraImport": true,
        "detail": "langchain.chat_models",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain.schema",
        "description": "langchain.schema",
        "isExtraImport": true,
        "detail": "langchain.schema",
        "documentation": {}
    },
    {
        "label": "initialize_agent",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "Tool",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "price_comparison",
        "importPath": "tools.tools",
        "description": "tools.tools",
        "isExtraImport": true,
        "detail": "tools.tools",
        "documentation": {}
    },
    {
        "label": "send_message_to_discord",
        "importPath": "tools.tools",
        "description": "tools.tools",
        "isExtraImport": true,
        "detail": "tools.tools",
        "documentation": {}
    },
    {
        "label": "handle_error_case",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_comparison_fields",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "calculate_price_difference_percentage",
        "importPath": "utils.utils",
        "description": "utils.utils",
        "isExtraImport": true,
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "send_message_to_discord",
        "importPath": "tools.discord_bot",
        "description": "tools.discord_bot",
        "isExtraImport": true,
        "detail": "tools.discord_bot",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "vendors",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "vendors",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "agents.police_agent",
        "description": "agents.police_agent",
        "isExtraImport": true,
        "detail": "agents.police_agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "agents.police_agent",
        "description": "agents.police_agent",
        "isExtraImport": true,
        "detail": "agents.police_agent",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "langchain",
        "description": "langchain",
        "isExtraImport": true,
        "detail": "langchain",
        "documentation": {}
    },
    {
        "label": "ConversationChain",
        "importPath": "langchain.chains",
        "description": "langchain.chains",
        "isExtraImport": true,
        "detail": "langchain.chains",
        "documentation": {}
    },
    {
        "label": "ConversationBufferMemory",
        "importPath": "langchain.memory",
        "description": "langchain.memory",
        "isExtraImport": true,
        "detail": "langchain.memory",
        "documentation": {}
    },
    {
        "label": "discord",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "discord",
        "description": "discord",
        "detail": "discord",
        "documentation": {}
    },
    {
        "label": "generate_message",
        "kind": 2,
        "importPath": "agents.police_agent",
        "description": "agents.police_agent",
        "peekOfCode": "def generate_message(product_name, \n                     vendor_price, \n                     market_price, \n                     comparison, \n                     price_difference_percentage, \n                     threshold=30):\n    \"\"\"\n    Generate an appropriate message based on the comparison result.\n    Returns a tuple of (is_malicious, message).\n    \"\"\"",
        "detail": "agents.police_agent",
        "documentation": {}
    },
    {
        "label": "format_agent_response",
        "kind": 2,
        "importPath": "agents.police_agent",
        "description": "agents.police_agent",
        "peekOfCode": "def format_agent_response(comparison_result, significant_discount_threshold=30):\n    \"\"\"Main function to format the agent's response.\"\"\"\n    error_response = handle_error_case(comparison_result)\n    if error_response:\n        return error_response\n    product_name, vendor_price, market_price, comparison = extract_comparison_fields(comparison_result)\n    price_difference_percentage = calculate_price_difference_percentage(vendor_price, market_price)\n    significant_difference, message = generate_message(\n        product_name, vendor_price, market_price, comparison, \n        price_difference_percentage, significant_discount_threshold",
        "detail": "agents.police_agent",
        "documentation": {}
    },
    {
        "label": "openai_api_key",
        "kind": 5,
        "importPath": "agents.police_agent",
        "description": "agents.police_agent",
        "peekOfCode": "openai_api_key = os.getenv(\"OPENAI_API_KEY\")\nif not openai_api_key:\n    raise ValueError(\"OPENAI_API_KEY is not set in the environment variables.\")\nwith open('db/price_history.json', 'r') as file:\n    market_data = json.load(file)\nwith open('db/product_data.json', 'r') as file:\n    product_data = json.load(file)\ndef generate_message(product_name, \n                     vendor_price, \n                     market_price, ",
        "detail": "agents.police_agent",
        "documentation": {}
    },
    {
        "label": "price_comparison_tool",
        "kind": 5,
        "importPath": "agents.police_agent",
        "description": "agents.police_agent",
        "peekOfCode": "price_comparison_tool = Tool(\n    name=\"Price Comparison Tool\",\n    func=lambda product_name_or_id: format_agent_response(\n      price_comparison(product_data, market_data, product_name_or_id)),\n    description=\"Compares the vendor price with the average market price and provides a report.\"\n)\nsend_discord_message_tool = Tool(\n    name='Discord Messaging Tool',\n    func=lambda discord_report: send_message_to_discord(discord_report),\n    description=\"Sends notification of scam to discord server through a bot\"",
        "detail": "agents.police_agent",
        "documentation": {}
    },
    {
        "label": "send_discord_message_tool",
        "kind": 5,
        "importPath": "agents.police_agent",
        "description": "agents.police_agent",
        "peekOfCode": "send_discord_message_tool = Tool(\n    name='Discord Messaging Tool',\n    func=lambda discord_report: send_message_to_discord(discord_report),\n    description=\"Sends notification of scam to discord server through a bot\"\n)\n# block_purchase_tool = BlockPurchaseTool()\ntools = [price_comparison_tool, send_discord_message_tool]\nmodel = ChatOpenAI(model='gpt-4', openai_api_key=openai_api_key)\nagent = initialize_agent(llm=model,\n                         tools=tools, ",
        "detail": "agents.police_agent",
        "documentation": {}
    },
    {
        "label": "tools",
        "kind": 5,
        "importPath": "agents.police_agent",
        "description": "agents.police_agent",
        "peekOfCode": "tools = [price_comparison_tool, send_discord_message_tool]\nmodel = ChatOpenAI(model='gpt-4', openai_api_key=openai_api_key)\nagent = initialize_agent(llm=model,\n                         tools=tools, \n                         agent_type=\"zero-shot-react-description\", \n                         verbose=True)",
        "detail": "agents.police_agent",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "agents.police_agent",
        "description": "agents.police_agent",
        "peekOfCode": "model = ChatOpenAI(model='gpt-4', openai_api_key=openai_api_key)\nagent = initialize_agent(llm=model,\n                         tools=tools, \n                         agent_type=\"zero-shot-react-description\", \n                         verbose=True)",
        "detail": "agents.police_agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "agents.police_agent",
        "description": "agents.police_agent",
        "peekOfCode": "agent = initialize_agent(llm=model,\n                         tools=tools, \n                         agent_type=\"zero-shot-react-description\", \n                         verbose=True)",
        "detail": "agents.police_agent",
        "documentation": {}
    },
    {
        "label": "check_cart_for_malicious_items",
        "kind": 2,
        "importPath": "pages.checkout",
        "description": "pages.checkout",
        "peekOfCode": "def check_cart_for_malicious_items(cart, vendors):\n    \"\"\"Check each product in the cart using the AI agent and return any warnings.\"\"\"\n    warnings = []\n    for id, quantity in cart.items():\n        product_name = next((p[\"name\"] for v in vendors\n                             for p in v[\"products\"] if p[\"id\"] == id), \"Unknown\")\n        agent_response = agent.run(f\"Check for scams for {product_name} and think step by step before taking action.\"\n                                   f\"If a scam is detected, give a final answer in this format: Scam: 'your answer'. \"\n                                   f\"Do not report your findings to the system admins. \")\n        print(agent_response)",
        "detail": "pages.checkout",
        "documentation": {}
    },
    {
        "label": "send_discord_warning_report",
        "kind": 2,
        "importPath": "pages.checkout",
        "description": "pages.checkout",
        "peekOfCode": "def send_discord_warning_report(warning_report):\n    agent.run(f\"Please send the following, official warning report to system admins: {warning_report}. \"\n              f\"Format the report in an easily readable but alarming manner\")\ndef format_discord_warning_report(warning_messages, vendors, cart_items):\n    timestamp = datetime.now()\n    time_of_warning = timestamp.strftime('%Y-%m-%d %H:%M:%S')\n    report_str = (f\"Time of warnings: {time_of_warning} \\n\"\n                  f\"Vendor Names: {vendors}\"\n                  f\"Cart Items: {cart_items}\"\n                  f\"Warnings Reported: \\n\")",
        "detail": "pages.checkout",
        "documentation": {}
    },
    {
        "label": "format_discord_warning_report",
        "kind": 2,
        "importPath": "pages.checkout",
        "description": "pages.checkout",
        "peekOfCode": "def format_discord_warning_report(warning_messages, vendors, cart_items):\n    timestamp = datetime.now()\n    time_of_warning = timestamp.strftime('%Y-%m-%d %H:%M:%S')\n    report_str = (f\"Time of warnings: {time_of_warning} \\n\"\n                  f\"Vendor Names: {vendors}\"\n                  f\"Cart Items: {cart_items}\"\n                  f\"Warnings Reported: \\n\")\n    for warning_msg in warning_messages:\n        report_str += warning_msg + \"\\n\"\n    return report_str",
        "detail": "pages.checkout",
        "documentation": {}
    },
    {
        "label": "display_cart_items",
        "kind": 2,
        "importPath": "pages.checkout",
        "description": "pages.checkout",
        "peekOfCode": "def display_cart_items(cart, vendors):\n    \"\"\"Display the items in the cart and calculate the total price.\"\"\"\n    st.header(\"Cart Items\")\n    total_price = 0\n    if cart:\n        for id, quantity in cart.items():\n            name = next((p[\"name\"] for v in vendors for p in v[\"products\"] if p[\"id\"] == id), \"Unknown\")\n            product_price = next((p[\"original_price\"] for v in vendors for p in v[\"products\"] if p[\"id\"] == id), 0)\n            st.write(f\"{name} x {quantity} = ${product_price * quantity:.2f}\")\n            total_price += product_price * quantity",
        "detail": "pages.checkout",
        "documentation": {}
    },
    {
        "label": "remove_suspicious_items_from_cart",
        "kind": 2,
        "importPath": "pages.checkout",
        "description": "pages.checkout",
        "peekOfCode": "def remove_suspicious_items_from_cart(cart, vendors, warnings):\n    \"\"\"Remove the items flagged as suspicious by the agent from the cart.\"\"\"\n    updated_cart = cart.copy()\n    for warning in warnings:\n        product_name = warning.split(\" priced at\")[0].replace(\"Scam: \", \"\").strip()\n        product_to_remove = next((p for v in vendors for p in v[\"products\"] if p[\"name\"] == product_name), None)\n        if product_to_remove:\n            product_id = product_to_remove[\"id\"]\n            if product_id in updated_cart:\n                del updated_cart[product_id] ",
        "detail": "pages.checkout",
        "documentation": {}
    },
    {
        "label": "handle_suspicious_items",
        "kind": 2,
        "importPath": "pages.checkout",
        "description": "pages.checkout",
        "peekOfCode": "def handle_suspicious_items(cart, vendors):\n    \"\"\"Handle the removal of suspicious items from the cart and display messages.\"\"\"\n    if not st.session_state['cart_scanned'] and st.session_state['warnings']:\n        st.error(\"Some items have been flagged as potentially suspicious and will be removed from your cart.\")\n        report = format_discord_warning_report(warning_messages=st.session_state['warnings'], vendors=vendors,\n                                                      cart_items=st.session_state.cart)\n        send_discord_warning_report(warning_report=report)\n        time.sleep(5) \n        # Remove suspicious items\n        remove_suspicious_items_from_cart(cart, vendors, st.session_state['warnings'])",
        "detail": "pages.checkout",
        "documentation": {}
    },
    {
        "label": "run_agent_on_cart",
        "kind": 2,
        "importPath": "pages.checkout",
        "description": "pages.checkout",
        "peekOfCode": "def run_agent_on_cart(cart, vendors):\n    \"\"\"Run the AI agent on the cart to check for suspicious items.\"\"\"\n    if 'warnings' not in st.session_state:\n        st.session_state['warnings'] = [] \n    if cart and not st.session_state['cart_scanned']:\n        st.subheader(\"Agent's Report\")\n        with st.spinner(\"Please wait while our agent is scanning your cart for suspicious items...\"):\n            warnings = check_cart_for_malicious_items(cart, vendors)\n            if warnings:\n                st.session_state['warnings'] = warnings",
        "detail": "pages.checkout",
        "documentation": {}
    },
    {
        "label": "send_discord_warning_report",
        "kind": 2,
        "importPath": "pages.checkout",
        "description": "pages.checkout",
        "peekOfCode": "def send_discord_warning_report(warning_report):\n    response = agent.run(f\"\"\"Please send the following, official warning report to system admins: {warning_report}. \n                Format the report in an easily readable but alarming manner. \n                As an example, you can format it like this:\n                🔴🔴🔴 WARNING REPORT 🔴🔴🔴 \n                Cop-N-Shop Warning Report:\n                🕒 Time of warnings: 1728241827.7173142 \n                🛍 Vendor Names: \n                Moe's Excellent Phones\n                Rating: 2.1",
        "detail": "pages.checkout",
        "documentation": {}
    },
    {
        "label": "format_discord_warning_report",
        "kind": 2,
        "importPath": "pages.checkout",
        "description": "pages.checkout",
        "peekOfCode": "def format_discord_warning_report(warning_messages, vendors, cart_items):\n    timestamp = datetime.datetime.now()\n    time_of_warning = timestamp.strftime('%Y-%m-%d %H:%M:%S')\n    report_str = (f\"Time of warnings: {time_of_warning} \\n\"\n                  f\"Vendor Names: {vendors}\"\n                  f\"Cart Items: {cart_items}\"\n                  f\"Warnings Reported: \\n\")\n    for warning_msg in warning_messages:\n        report_str += warning_msg + \"\\n\"\n    return report_str",
        "detail": "pages.checkout",
        "documentation": {}
    },
    {
        "label": "total_price",
        "kind": 5,
        "importPath": "pages.checkout",
        "description": "pages.checkout",
        "peekOfCode": "total_price = display_cart_items(st.session_state.cart, vendors)\n# Automatically run the agent on the cart to check for suspicious items and remove flagged items\nrun_agent_on_cart(st.session_state.cart, vendors)\nhandle_suspicious_items(st.session_state.cart, vendors)\n# Proceed to checkout button (no agent interaction here, just navigation)\nproceed_btn = st.button('Proceed to Conclusion page')\nif proceed_btn:\n    st.switch_page(\"pages/conclusion.py\")",
        "detail": "pages.checkout",
        "documentation": {}
    },
    {
        "label": "proceed_btn",
        "kind": 5,
        "importPath": "pages.checkout",
        "description": "pages.checkout",
        "peekOfCode": "proceed_btn = st.button('Proceed to Conclusion page')\nif proceed_btn:\n    st.switch_page(\"pages/conclusion.py\")",
        "detail": "pages.checkout",
        "documentation": {}
    },
    {
        "label": "openai_api_key",
        "kind": 5,
        "importPath": "pages.vendor_chat",
        "description": "pages.vendor_chat",
        "peekOfCode": "openai_api_key = os.getenv(\"OPENAI_API_KEY\")\nif not openai_api_key:\n    raise ValueError(\"OPENAI_API_KEY is not set in the environment variables.\")\nclient = OpenAI(api_key=openai_api_key)\nif \"openai_model\" not in st.session_state:\n    st.session_state[\"openai_model\"] = \"gpt-4o-mini\"\nvendor = st.session_state.vendor\n# st.write(vendor)\ncart_str = \"\"\nif st.session_state.cart:",
        "detail": "pages.vendor_chat",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "pages.vendor_chat",
        "description": "pages.vendor_chat",
        "peekOfCode": "client = OpenAI(api_key=openai_api_key)\nif \"openai_model\" not in st.session_state:\n    st.session_state[\"openai_model\"] = \"gpt-4o-mini\"\nvendor = st.session_state.vendor\n# st.write(vendor)\ncart_str = \"\"\nif st.session_state.cart:\n    for id, quantity in st.session_state.cart.items():\n        # Find product details from the vendors data\n        name = next((p[\"name\"] for v in vendors for p in v[\"products\"] if p[\"id\"] == id), \"Unknown\")",
        "detail": "pages.vendor_chat",
        "documentation": {}
    },
    {
        "label": "vendor",
        "kind": 5,
        "importPath": "pages.vendor_chat",
        "description": "pages.vendor_chat",
        "peekOfCode": "vendor = st.session_state.vendor\n# st.write(vendor)\ncart_str = \"\"\nif st.session_state.cart:\n    for id, quantity in st.session_state.cart.items():\n        # Find product details from the vendors data\n        name = next((p[\"name\"] for v in vendors for p in v[\"products\"] if p[\"id\"] == id), \"Unknown\")\n        product_price = next((p[\"original_price\"] for v in vendors for p in v[\"products\"] if p[\"id\"] == id), 0)\n        cart_str += f\"{name} x {quantity} = ${product_price * quantity:.2f}\\n\"\n    cart_str += f\"**Total: ${st.session_state.total:.2f}\\n**\"",
        "detail": "pages.vendor_chat",
        "documentation": {}
    },
    {
        "label": "cart_str",
        "kind": 5,
        "importPath": "pages.vendor_chat",
        "description": "pages.vendor_chat",
        "peekOfCode": "cart_str = \"\"\nif st.session_state.cart:\n    for id, quantity in st.session_state.cart.items():\n        # Find product details from the vendors data\n        name = next((p[\"name\"] for v in vendors for p in v[\"products\"] if p[\"id\"] == id), \"Unknown\")\n        product_price = next((p[\"original_price\"] for v in vendors for p in v[\"products\"] if p[\"id\"] == id), 0)\n        cart_str += f\"{name} x {quantity} = ${product_price * quantity:.2f}\\n\"\n    cart_str += f\"**Total: ${st.session_state.total:.2f}\\n**\"\nelse:\n    cart_str += (\"The user's cart is empty.\")",
        "detail": "pages.vendor_chat",
        "documentation": {}
    },
    {
        "label": "nature_subprompt",
        "kind": 5,
        "importPath": "pages.vendor_chat",
        "description": "pages.vendor_chat",
        "peekOfCode": "nature_subprompt = \"\"\nif vendor[\"nature\"] == \"subversive\": \n    nature_subprompt = \"subversive. You will do your best to not acknowledge defects, and keep the conversation focused on the sale.\"\nelif vendor[\"nature\"] == \"honest\":\n    nature_subprompt = \"honest. You will be forward about issues with the products, and offer discounts to ensure the user is happy.\"\nprompt = f\"\"\"\nYou are a vendor agent and salesperson working for {vendor[\"name\"]}. Here is their cart.\n{st.session_state.cart}\nYour primary objective is to complete the sale. You are {nature_subprompt}\n\"\"\"",
        "detail": "pages.vendor_chat",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "pages.vendor_chat",
        "description": "pages.vendor_chat",
        "peekOfCode": "prompt = f\"\"\"\nYou are a vendor agent and salesperson working for {vendor[\"name\"]}. Here is their cart.\n{st.session_state.cart}\nYour primary objective is to complete the sale. You are {nature_subprompt}\n\"\"\"\nif 'messages' not in st.session_state:\n    st.session_state.messages = []\n# Initialize chat history\nif not st.session_state.messages or st.session_state.messages[0][\"content\"] != prompt:\n    st.session_state.messages = [{\"role\": \"user\", \"content\": prompt}]",
        "detail": "pages.vendor_chat",
        "documentation": {}
    },
    {
        "label": "send_message_to_discord",
        "kind": 2,
        "importPath": "tools.discord_bot",
        "description": "tools.discord_bot",
        "peekOfCode": "def send_message_to_discord(message):\n    # Set up intents (for reading message content, if required)\n    intents = discord.Intents.default()\n    intents.message_content = True  # Ensure this is enabled\n    # Initialize the bot client\n    client = discord.Client(intents=intents)\n    # Event to trigger when the bot is ready\n    @client.event\n    async def on_ready():\n        print(f'Logged in as {client.user}')",
        "detail": "tools.discord_bot",
        "documentation": {}
    },
    {
        "label": "CHANNEL_ID",
        "kind": 5,
        "importPath": "tools.discord_bot",
        "description": "tools.discord_bot",
        "peekOfCode": "CHANNEL_ID = int(os.getenv('CHANNEL_ID'))\nBOT_TOKEN = os.getenv('BOT_TOKEN')\ndef send_message_to_discord(message):\n    # Set up intents (for reading message content, if required)\n    intents = discord.Intents.default()\n    intents.message_content = True  # Ensure this is enabled\n    # Initialize the bot client\n    client = discord.Client(intents=intents)\n    # Event to trigger when the bot is ready\n    @client.event",
        "detail": "tools.discord_bot",
        "documentation": {}
    },
    {
        "label": "BOT_TOKEN",
        "kind": 5,
        "importPath": "tools.discord_bot",
        "description": "tools.discord_bot",
        "peekOfCode": "BOT_TOKEN = os.getenv('BOT_TOKEN')\ndef send_message_to_discord(message):\n    # Set up intents (for reading message content, if required)\n    intents = discord.Intents.default()\n    intents.message_content = True  # Ensure this is enabled\n    # Initialize the bot client\n    client = discord.Client(intents=intents)\n    # Event to trigger when the bot is ready\n    @client.event\n    async def on_ready():",
        "detail": "tools.discord_bot",
        "documentation": {}
    },
    {
        "label": "price_comparison",
        "kind": 2,
        "importPath": "tools.tools",
        "description": "tools.tools",
        "peekOfCode": "def price_comparison(product_data, market_data, product_name_or_id):\n    market_lookup = {product['id']: product \n                     for product in market_data['products']}\n    for data in product_data:\n          if (data['id'] == product_name_or_id or \n              data['name'] == product_name_or_id):\n              market_product = market_lookup.get(data['id'])\n              if market_product:\n                  vendor_price = data['original_price']\n                  market_price = market_product['average_market_price']",
        "detail": "tools.tools",
        "documentation": {}
    },
    {
        "label": "send_message_to_discord",
        "kind": 2,
        "importPath": "tools.tools",
        "description": "tools.tools",
        "peekOfCode": "def send_message_to_discord(message):\n    # Set up intents (for reading message content, if required)\n    intents = discord.Intents.default()\n    intents.message_content = True  # Ensure this is enabled\n    # Initialize the bot client\n    client = discord.Client(intents=intents)\n    # Event to trigger when the bot is ready\n    @client.event\n    async def on_ready():\n        print(f'Logged in as {client.user}')",
        "detail": "tools.tools",
        "documentation": {}
    },
    {
        "label": "CHANNEL_ID",
        "kind": 5,
        "importPath": "tools.tools",
        "description": "tools.tools",
        "peekOfCode": "CHANNEL_ID = int(os.getenv('CHANNEL_ID'))\nBOT_TOKEN = os.getenv('BOT_TOKEN')\ndef send_message_to_discord(message):\n    # Set up intents (for reading message content, if required)\n    intents = discord.Intents.default()\n    intents.message_content = True  # Ensure this is enabled\n    # Initialize the bot client\n    client = discord.Client(intents=intents)\n    # Event to trigger when the bot is ready\n    @client.event",
        "detail": "tools.tools",
        "documentation": {}
    },
    {
        "label": "BOT_TOKEN",
        "kind": 5,
        "importPath": "tools.tools",
        "description": "tools.tools",
        "peekOfCode": "BOT_TOKEN = os.getenv('BOT_TOKEN')\ndef send_message_to_discord(message):\n    # Set up intents (for reading message content, if required)\n    intents = discord.Intents.default()\n    intents.message_content = True  # Ensure this is enabled\n    # Initialize the bot client\n    client = discord.Client(intents=intents)\n    # Event to trigger when the bot is ready\n    @client.event\n    async def on_ready():",
        "detail": "tools.tools",
        "documentation": {}
    },
    {
        "label": "handle_error_case",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def handle_error_case(comparison_result):\n    \"\"\"Handle the error case if 'error' is in the comparison result.\"\"\"\n    if \"error\" in comparison_result:\n        return {\"error\": comparison_result[\"error\"]}\n    return None\ndef extract_comparison_fields(comparison_result):\n    \"\"\"Extract and validate required fields from the comparison result.\"\"\"\n    try:\n        product_name = comparison_result[\"product_name\"]\n        vendor_price = float(comparison_result[\"vendor_price\"])",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "extract_comparison_fields",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def extract_comparison_fields(comparison_result):\n    \"\"\"Extract and validate required fields from the comparison result.\"\"\"\n    try:\n        product_name = comparison_result[\"product_name\"]\n        vendor_price = float(comparison_result[\"vendor_price\"])\n        market_price = float(comparison_result[\"market_price\"])\n        comparison = comparison_result[\"comparison\"]\n        return product_name, vendor_price, market_price, comparison\n    except KeyError as e:\n        raise ValueError(f\"Missing field in comparison result: {str(e)}\")",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "calculate_price_difference_percentage",
        "kind": 2,
        "importPath": "utils.utils",
        "description": "utils.utils",
        "peekOfCode": "def calculate_price_difference_percentage(vendor_price, market_price):\n    \"\"\"Calculate the price difference percentage between vendor and market prices.\"\"\"\n    if market_price == 0:\n        raise ValueError(\"Market price cannot be zero.\")\n    return ((market_price - vendor_price) / market_price) * 100",
        "detail": "utils.utils",
        "documentation": {}
    },
    {
        "label": "load_data",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def load_data():\n    # Load vendor data\n    with open(os.path.join('db', 'vendor_data.json')) as f:\n        vendor_data = json.load(f)\n    # Load product data\n    with open(os.path.join('db', 'product_data.json')) as f:\n        product_data = json.load(f)\n    # Combine vendor data with products\n    vendors = []\n    for vendor in vendor_data['vendors']:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "add_to_cart",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def add_to_cart(product):\n    \"\"\"Add the selected product to the cart.\"\"\"\n    id = product[\"id\"]\n    if id in st.session_state.cart:\n        st.session_state.cart[id] += 1  # Increment quantity\n    else:\n        st.session_state.cart[id] = 1  # Add new product\n    st.session_state.total += product[\"original_price\"]  # Update total\n    st.success(f\"Added {product['name']} to cart!\")\n# Header",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "vendors",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "vendors = load_data()\n# Initialize session state for cart and total\nif 'cart' not in st.session_state:\n    st.session_state.cart = {}\nif 'total' not in st.session_state:\n    st.session_state.total = 0\ndef add_to_cart(product):\n    \"\"\"Add the selected product to the cart.\"\"\"\n    id = product[\"id\"]\n    if id in st.session_state.cart:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "vendors",
        "kind": 5,
        "importPath": "products_data",
        "description": "products_data",
        "peekOfCode": "vendors = [\n    {\n        \"name\": \"Vendor 1\",\n        \"products\": [\n            {\n                \"id\": 1,\n                \"name\": \"Product 1\",\n                \"price\": 10.00,\n                \"image\": \"https://via.placeholder.com/150\"\n            },",
        "detail": "products_data",
        "documentation": {}
    }
]